
import { TableContainer } from '../container/TableContainer';
import { BaseTable } from '../table/BaseTable';
import { CellContainer } from '../container/CellContainer';
import * as _ from '.././../utils/index';
import { DefaultConfig } from '../../config/DefaultConfig';
import { Subject } from '../../communication/Subject';
import { SubjectMsgInterface } from '../../interface/SubjectMsgInterface';
import { PositionManager } from '../../module/positionManager/PositionManager';
import { BaseTableListConfig } from '../../config/BaseTableListConfig';
import { BaseTableConfig } from '../../config/BaseTableConfig';
export class BaseTableList extends TableContainer {
    public children: BaseTable[] = new Array();
    public currentTable: BaseTable | undefined;
    public currentCotanier: CellContainer | undefined;
    public tableListSubject = new Subject(); //  表格事件
    public $positionManager: PositionManager = PositionManager.getInstance('multi-table'); // 位置记录器
    public defaultConfig: DefaultConfig = new DefaultConfig(); // 默认设置
    public config: BaseTableListConfig = new BaseTableListConfig();



    constructor(id: any, config?: BaseTableListConfig) {
        super({
            id,
            $selectBoxId: (config && config.positionManagerId) ? config.selectBoxId : id,
            $defConfigId: id,
            $positionManagerId: (config && config.positionManagerId) ? config.positionManagerId : id
        });
    }



    /**
     * onTableSendMsg
     */
    public onTableSendMsg(msg: SubjectMsgInterface) {
        this.subjectSend(msg);
        if (this.config.renderEvent.indexOf(msg.ev_type) !== -1) {
            this.$positionManager.render();
        }
    }
    /**
     * getTable
     */
    public getTable(index: number) {
        return this.children[index];
    }


    /**
     * createTable
     */
    public createTable(id?: any, config?: any) {
        const defConfig: BaseTableConfig = {
            tableGroupId: this.id,
        };
        _.objectSet(defConfig, config, 'union');
        const tmpTable: BaseTable = new BaseTable(id, defConfig);
        tmpTable.$subject.subscribe(this.onTableSendMsg, this);
        return tmpTable;
    }
    /**
     * addChild
     * 备注：添加子节点
     * @param child: BaseTable 要添加的子节点
     * @param targetIndex?: number 添加的位置
     */
    public addChild(child: BaseTable, targetIndex?: number) {
        targetIndex = (targetIndex === undefined || targetIndex === null) ? this.children.length : targetIndex;
        if (!child.id) {
            child.id = 'def_' + _.guid();
        }
        this.children.splice(targetIndex, 0, child);
    }


    /**
     * name
     */
    public render() {
        this.$positionManager.render();
    }

}
