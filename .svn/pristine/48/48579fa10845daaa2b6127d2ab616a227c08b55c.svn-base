import { BaseCell } from '../../module/cell/baseCell';
import { ContainerInterface } from '../../interface/ContainerInterface';
import { Container } from '../container/container';
import * as _ from '../..//utils';
import { DragStartData } from '../../interface/DragStartData';



// 只有对于容器来说才有相对位置
export class TheadContainer extends Container {

    public canExpand: boolean = false; // 是否可以展开
    public positionCheck: boolean = true; // 是否需要位置检查
    public children: TheadContainer[] = []; // 子容器
    public parent: TheadContainer | null = null; // 父容器
    public position: number[] = []; // 相对于根节点的职位
    public mergeList: TheadContainer[] = []; // 合并单元格list
    /**
     * 设置父级容器 截止2018-10-9暂未使用
     *
     * @param {TheadContainer} parent
     * @memberof TheadContainer
     */
    public setParent(parent: TheadContainer) {
        this.parent = parent;
    }

    /**
     * 设置Cell属性
     *
     * @param {BaseCell} cell
     * @memberof TheadContainer
     */
    public setCell(cell: BaseCell) {
        this.cell = cell;
    }

    /**
     * 设置container属性 部分属性特殊处理
     *
     * @param {ContainerInterface} containerData
     * @memberof TheadContainer
     */
    public setContainerData(containerData: ContainerInterface) {
        for (const key in containerData) {
            if (containerData.hasOwnProperty(key)) {
                const value: any = (containerData as any)[key];
                if (key === 'children') {
                    const children = Array();
                    console.log(value);
                    value.forEach((item: any) => {
                        if (item && item.EPI_READY) {
                            const tmpTheadContainer = new TheadContainer();
                            tmpTheadContainer.setContainerData(item);
                            console.log(tmpTheadContainer);
                            children.push(tmpTheadContainer);
                        }
                    });
                    console.log(children);
                    this.setProperty(key, children);
                } else if (key === 'cell' && value) {
                    const cell = new BaseCell('');
                    cell.setCellData(value);
                    this.setProperty(key, cell);
                } else {
                    this.setProperty(key, value);
                }
            }
        }
    }




    /**
     * 自动递归计算容器长宽，以及span、position等属性值
     *
     * @param {any[]} [leafIndexList]
     * @memberof TheadContainer
     */
    public resize(leafIndexList?: any[]) {

        let span1 = 0;
        let maxSide2Length = 0; // 孩子的最大高度
        let sumSide1 = 0;
        if (this.children.length !== 0) {
            this.children.forEach((child: TheadContainer, i) => {
                if (child.style.display === 'none') {
                    return;
                }
                const childPosition: any = this.position.concat(i);
                child.position = childPosition;
                child.resize(leafIndexList);
                span1 += child.side1;
                maxSide2Length = child.side2 > maxSide2Length ? child.side2 : maxSide2Length;
                {
                    sumSide1 += child.config.baseSide1; // 为了计算宽度加入的
                }
            });
            this.side1 = span1;
            this.side2 = maxSide2Length;
            if (this.cell) {
                this.cell.span1 = span1;
                this.cell.span2 = 1;
                this.side2 += 1;
                if (this.name === 'top') {
                    this.style.width = sumSide1 + 'px';
                    this.config.baseSide1 = sumSide1;
                }
            }
        } else if (this.mergeList.length !== 0) {

        } else {
            // 如果没有子节点 恢复原有的属性
            this.side1 = this.side1 >= 1 ? 1 : 0;
            this.side2 = this.side2 >= 1 ? 1 : 0;
            if (this.cell) {
                this.cell.span1 = this.cell.span1 >= 1 ? 1 : 0;
                this.cell.span2 = this.cell.span2 >= 1 ? 1 : 0;
                if (this.name === 'top') {
                    this.style.width = (this.config.baseSide1 * this.cell.span1) + 'px';
                    if (leafIndexList) {
                        leafIndexList.push(this);
                    }
                } else if (this.name === 'left') {
                    // debugger;
                    this.style.width = (this.config.baseSide2 * this.cell.span2) + 'px';
                    // console.log(this.style.width);
                }
            }

        }
        this.makeChildrenSameSide2(maxSide2Length);
        this.children.forEach((child: any) => {
            if (child.name === 'left') {
                child.changeWidthByStandard(leafIndexList || []);
            }
        });

    }
    /**
     * addChild
     * 备注：添加子节点
     * @param child: BaseCell 要添加的子节点
     * @param targetIndex?: number 添加的位置
     */
    public addChild(child: TheadContainer, targetIndex?: number) {
        targetIndex = (targetIndex === undefined || targetIndex === null) ? this.children.length : targetIndex;
        this.children.splice(targetIndex, 0, child);
    }
    /**
     * deletChild
     * 备注：删除子节点
     * @param count: number 要删除的个数 默认为1
     * @param targetIndex?: number 删除的位置
     * @param needDeleteItChildren?: boolean 是否连同该被 要删除的节点A 和A的子节点都删除
     */
    public deletChild(targetIndex: number, count?: number, needDeleteItChildren?: boolean) {
        count = count == null ? 1 : count;
        if (needDeleteItChildren) {
            this.children.splice(targetIndex, count);
        } else {
            const childrenList: any[] = []; // 临时存被删除BaseTheadCell的孩子们
            for (let index = targetIndex; index < targetIndex + count; index++) {
                this.children[index].children.forEach((child: TheadContainer, i: number) => {
                    childrenList.push(child);
                });
            }
            this.children.splice(targetIndex, count);
            this.children = this.children.concat(childrenList);
        }
    }

    /**
     * replaceChild
     * 备注：替换子节点
     * @param count: number 要删除的个数 默认为1
     * @param targetIndex?: number 删除的位置
     * @param needDeleteItChildren?: boolean 是否连同该被 要删除的节点A 和A的子节点都删除
     */
    public replaceChild(targetIndex: number, newChild: TheadContainer, needDeleteItChildren?: boolean) {
        if (needDeleteItChildren) {
            this.children.splice(targetIndex, 1, newChild);
        } else {
            const childrenList: any[] = []; // 临时存被删除BaseTheadCell的孩子们
            this.children[targetIndex].children.forEach((child: TheadContainer, i: number) => {
                childrenList.push(child);
            });
            this.children.splice(targetIndex, 1, newChild);
            newChild.children = newChild.children.concat(childrenList);
        }
    }

    /**
     * getTopList
     * 备注：顶部表头转换为view数组函数
     * @param list?: any[]
     */
    public getTopList(list: any[], leafIndexList: any[]) {
        const container = this.clone(['$root'],true); // 之前为什么要拷贝？因为要区分该源container与页面上显示的Container
        list[0].push(container);
        if (this.children.length !== 0) {
            this.children.forEach((child: TheadContainer) => {
                child.getTopList(_.drop(list), leafIndexList);
            });
        } else {
            if (leafIndexList) {
                leafIndexList.push(container);
            }
        }
    }


    /**
     * getLeftList
     * 备注：左侧表头转换为view数组函数
     * @param parentList?: any[]
     */
    public getLeftList(parentList?: any) {
        // this.calWidth();
        const container = this.clone(['$root'], true);
        let childrenList: any = [[]];
        if (_.last(this.position) === 0) {
            parentList[0].push(container);
        } else {
            childrenList[0].push(container);
        }
        this.children.forEach((child: TheadContainer, i) => {
            let tmpList: any;
            tmpList = child.getLeftList(childrenList[0].length > 0 ? childrenList : parentList);

            if (JSON.stringify(childrenList) === '[[]]') {
                childrenList = [];
            } else {
                if (JSON.stringify(tmpList) === '[[]]') {
                    tmpList = [];
                }
            }
            childrenList = childrenList.concat(tmpList);
        });
        return childrenList;
    }


    /**
     * 添加子容器
     *
     * @param {DragStartData} containerData 要添加的数据
     * @param {number} [targetIndex] 添加的位置
     * @memberof Custom1Thead
     */
    public containerAdd(data: DragStartData, targetIndex?: number) {
        const theadContainer = this.createContain(data);
        this.addChild(theadContainer, targetIndex);
    }


    /**
     * 创建容器
     *
     * @private
     * @param {DragStartData} data
     * @returns
     * @memberof BaseThead
     */
    public createContain(data: DragStartData) {
        const container = new TheadContainer(this.name, 1, 1, this.$root);
        container.setContainerData(data.containerData);
        return container;
    }

    public calWidth() {
        // console.log('calWidth');
        if (this.cell) {
            if (this.name === 'top') {
                this.style.width = (this.config.baseSide1 * this.cell.span1) + 'px';
            } else if (this.name === 'left') {
                // this.style.width = (this.baseSide1 * this.cell.span2) + 'px';
                this.style.height = (this.config.baseSide2 * this.cell.span2) + 'px';
                this.style.lineHeight = this.style.height;
            }
        }
    }

    /**
     * increaseTheLastChildHeight
     * 备注：增加叶子节点BaseTheadCell的高度
     * @param diff: number 需要增加的高度
     */
    private increaseTheLeafChildHeight(diff: number) {
        if (this.children.length !== 0) {
            this.children.forEach((child: TheadContainer) => {
                child.increaseTheLeafChildHeight(diff);
            });
        } else {
            if (this.cell) {
                this.cell.span2 += diff;
            }
        }
        this.side2 += diff;
    }
    /**
     * makeChildrenSameHeight
     * 备注：使所有自己的孩子BaseTheadCell 高度一致
     * @param maxHeight: number 孩子中最大高度
     */
    private makeChildrenSameSide2(maxHeight: number) {
        this.children.forEach((child: TheadContainer) => {
            const diff = maxHeight - child.side2;
            if (diff > 0) {
                child.increaseTheLeafChildHeight(diff);
            }
        });
    }


    private changeWidthByStandard(leafIndexList: any[]) {
        const startIndex = this.position.length - 1;

        if (startIndex >= 0 && this.cell && leafIndexList.length >= startIndex + this.cell.span2) {
            let sum = 0;
            for (let i = startIndex; i < startIndex + this.cell.span2; i++) {
                const container: TheadContainer = leafIndexList[i];
                sum += container.config.baseSide2;
                if (this.cell.content) {
                    // console.log('leafIndexList' + '的' + i + ':' + container.baseSide1);
                }

            }
            this.style.width = sum + 'px';
            if (this.cell.content) {
                // console.log(this.cell.content + ':' + this.style.width);
            }
        }
    }


}

