
import { BaseCell } from '../../module/cell/baseCell';
import { TbodyContainer } from '../container/TbodyContainer';
export class BaseTbody extends TbodyContainer {
    public bodyData: any[] = [];

    /**
     * 添加一行数据
     *
     * @param {any[]} rowData
     * @returns
     * @memberof BaseTbody
     */
    public addRow(rowData: any[], rowIndex?: number) {
        rowIndex = rowIndex === undefined ? this.side1 : rowIndex;
        if (!rowData) {
            return;
        }
        const row: TbodyContainer[] = [];
        (rowData || []).forEach((data: any) => {
            row.push(this.createContain(data));
        });
        this.bodyData.splice(rowIndex, 0, row);
        this.resize();
    }

    /**
     * changeOneColStyle 修改一列单元格style
     *  index:number
     */
    public changeOneColStyle(index: number, style: any) {
        try {
            console.log('colIndex:' + index);
            this.bodyData.forEach((tr: TbodyContainer[]) => {
                for (const key in style) {
                    if (style.hasOwnProperty(key)) {
                        tr[index].style[key] = (style as any)[key];
                    }
                }
            });
        } catch (error) {
            console.error(error);
        }
    }

    /**
     * changeOneRowStyle 修改一行单元格style
     *  index:number
     */
    public changeOneRowStyle(index: number, style: any) {
        try {
            console.log('rowIndex:' + index);
            this.bodyData[index].forEach((td: TbodyContainer) => {
                for (const key in style) {
                    if (style.hasOwnProperty(key)) {
                        td.style[key] = (style as any)[key];
                    }
                }
            });
        } catch (error) {
            console.error(error);
        }
    }


    /**
     * addCol
     */
    public addCol(colData: any[], colIndex?: number) {
        colIndex = colIndex === undefined ? this.side2 : colIndex;
        (this.bodyData || []).forEach((row, i) => {
            row.splice(colIndex, 0, this.createContain(colData[i]));
        });
        this.resize();
    }

    /**
     * resize
     */
    public resize() {
        this.side2 = this.bodyData.length;
        if (this.bodyData[0]) {
            this.side1 = this.bodyData[0].length;
        }
    }


    public initData(col: any, row: any) {
        this.bodyData = [];
        for (let i = 0; i < row; i++) {
            this.addRow(new Array(col).fill(''));
        }
    }
    /**
     * 创建容器
     *
     * @private
     * @param {DragStartData} data
     * @returns
     * @memberof BaseThead
     */
    public createContain(data: any) {
        const container = new TbodyContainer('tbody');
        const cell = new BaseCell(data.cellData || '');
        container.setCell(cell);
        container.setContainerData(data.containerData || {});
        return container;
    }

    /**
     * getContainer
     */
    public getContainer(position: number[]) {
        return this.bodyData[position[0]][position[1]];
    }

    public convert() {
        this.bodyData.forEach((tr: any, i: number) => {
            tr.forEach((td: any, j: number) => {
                td.position = [i, j];
            });
        });
        return this.bodyData;
    }
}